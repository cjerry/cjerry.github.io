<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.6.2">Jekyll</generator>
  
  
  <link href="http://jerryjrchen.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://jerryjrchen.com/" rel="alternate" type="text/html" />
  <updated>2018-05-05T15:27:36+00:00</updated>
  <id>http://jerryjrchen.com//</id>

  
    <title type="html">jerryjrchen</title>
  

  
    <subtitle>Jerry Chen's website
</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">To my CS 61A students, past and present</title>
      
      <link href="http://jerryjrchen.com/2018/04/28/goodbye/" rel="alternate" type="text/html" title="To my CS 61A students, past and present" />
      <published>2018-04-28T00:00:00+00:00</published>
      <updated>2018-04-28T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2018/04/28/goodbye</id>
      <content type="html" xml:base="http://jerryjrchen.com/2018/04/28/goodbye/">&lt;blockquote&gt;
  &lt;p&gt;These few paragraphs were originally meant to be delivered as a small
end of semester speech, but I decided to post it here instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First off, thank you so much for taking this class and for attending
discussion. There’s a lot of hype around CS 61A of course, but I really
hope that this course lived up to your expectations. Your time is
valuable, and I’m glad you’ve chosen to spend some fraction of it learning
this intensive subject. You’ve put in a lot of hard work, and you almost
certainly don’t get enough recognition for that.&lt;/p&gt;

&lt;p&gt;I also want to acknowledge that while this class covers a ton of ground in
one semester, there is plenty it doesn’t teach you about computer science.
In fact, there are things none of the classes here at Berkeley teach you.
These include soft skills like perseverance and time management. But
there’s also topics like CS ethics, the impact of technology on society,
and thinking critically about who has access to technology.&lt;/p&gt;

&lt;p&gt;Now that you know a bit more about programming, you’re part of a group of
people that have the opportunity to shape the future direction of
technology. It’s up to you to research, think about, and discuss these
tricky topics with others. It’s also very easy to not think about this at
all — this is the path of least resistance I hope that you avoid. I don’t
really care so much what you think — but I do really care that you decide
to think about these tough technology issues.&lt;/p&gt;

&lt;p&gt;Finally, this is my last time teaching CS 61A. I’m graduating after this
semester, and I’ve been involved with this course every semester I’ve been
here. I took the course back in Fall 2014. I first started TAing back in
Fall 2015.&lt;/p&gt;

&lt;p&gt;To be honest, this is a tough thing to say, and I feel quite emotional
about this moment. Choosing to teach this course was one of the best
decisions of my life, and it has been with me through both the good and
the bad times. It’s been a lot of fun, and this semester has been no
exception. So thank you again for coming, but also thank you so much for
being a part of my teaching experience.&lt;/p&gt;

&lt;p&gt;I want to end on a slightly more positive note. This course is run mostly
by students like you, who have decided that they wanted to give back to
the Berkeley CS community by sharing their knowledge. If that’s something
that sounds interesting to you, I really encourage you to get more
involved with teaching.&lt;/p&gt;

&lt;p&gt;Farewell, CS 61A!&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">These few paragraphs were originally meant to be delivered as a small end of semester speech, but I decided to post it here instead.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">A very Pane-ful Presentation</title>
      
      <link href="http://jerryjrchen.com/2018/02/24/presenting/" rel="alternate" type="text/html" title="A very Pane-ful Presentation" />
      <published>2018-02-24T00:00:00+00:00</published>
      <updated>2018-02-24T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2018/02/24/presenting</id>
      <content type="html" xml:base="http://jerryjrchen.com/2018/02/24/presenting/">&lt;p&gt;Credit for this idea goes to this &lt;a href=&quot;https://stackoverflow.com/a/30275065&quot;&gt;StackOverflow
answer&lt;/a&gt;. I just wanted to raise
awareness and also share some tweaks I made to make this smoother.&lt;/p&gt;

&lt;p&gt;I’ve recently come up against an interesting setup challenge. I needed to
satisfy both requirements while teaching:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Display a keynote along with speaker notes (so display mirroring won’t
work).&lt;/li&gt;
  &lt;li&gt;Display a terminal for demo purposes. Display mirroring would be nice
here, so that I wouldn’t need to put the terminal on the screen behind
me and crane my neck while I type.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 1 is fairly straightforward, but it requires disabling display
mirroring. So my approach (at least for now) is to accomplish point 2
&lt;em&gt;without&lt;/em&gt; display mirroring. I considered a few alternatives:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Just put the terminal on the projector screen and crane my neck as I
type. This has the drawback of being bad for my neck! What a pain (in
the neck).&lt;/li&gt;
  &lt;li&gt;This is cheating, but abandon point 1 and just do display mirroring. I
would print out my speaker notes or have it on another device. This
would probably work, but I don’t like having to sync up notes with
another device. Having paper notes would probably work but it’s a little
bit annoying to prep beforehand.&lt;/li&gt;
  &lt;li&gt;Secret option 3: do something completely different.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;secret-option-3&quot;&gt;Secret Option 3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;tmux&lt;/a&gt; is a terminal multiplexer,
which, in a nutshell, brings you the following benefits (and since I’m a
tmux newbie, probably many more that I am not aware of):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Open multiple terminal windows in a single session.&lt;/strong&gt; Windows in tmux
don’t open a new terminal window, but behave kinda like tabs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open multiple terminal sessions within a single window.&lt;/strong&gt; This isn’t
super relevant here, but it’s still a nice feature. You can split a
single window into many terminal instances.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Detach and attach terminal sessions.&lt;/strong&gt; This is where the magic
happens! Usually, when a terminal application is quit, the terminal
session is closed as well. &lt;em&gt;Detaching&lt;/em&gt; allows you to exit a terminal
session in tmux  without closing it.  You can return to a detached
session by &lt;em&gt;attaching&lt;/em&gt; to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most importantly, it’s possible to attach to a given terminal session in
tmux multiple times. This means I can have two separate windows attached
to one terminal, both displaying the same thing! You can probably see
where this is going.&lt;/p&gt;

&lt;p&gt;To get started, I create a new tmux session and name it according to
whatever thing I’m doing just to keep things simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tmux new -s demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I open another terminal window to put on a separate screen, and
attach to that session:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tmux attach -t demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here it is in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/mirror_terminals.gif&quot; alt=&quot;Mirrored terminals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, with not very much setup, it’s possible to get the best of both
worlds: a projected terminal without needing to resort to display
mirroring.&lt;/p&gt;

&lt;p&gt;There’s one final detail, which is that tmux windows will size themselves
according to the minimum dimensions of attached sessions. So if one
terminal window is bigger than the other, there will be a size mismatch.
Usually, the projected terminal is smaller (since it’s more zoomed in), so
the user terminal will end up with a bit less space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/size_diff.png&quot; alt=&quot;Size difference in terminals&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Credit for this idea goes to this StackOverflow answer. I just wanted to raise awareness and also share some tweaks I made to make this smoother.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Redesign - A Postmortem</title>
      
      <link href="http://jerryjrchen.com/2018/01/12/redesign/" rel="alternate" type="text/html" title="Redesign - A Postmortem" />
      <published>2018-01-12T00:00:00+00:00</published>
      <updated>2018-01-12T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2018/01/12/redesign</id>
      <content type="html" xml:base="http://jerryjrchen.com/2018/01/12/redesign/">&lt;h2 id=&quot;building-on-github-pages&quot;&gt;Building on GitHub Pages&lt;/h2&gt;
&lt;p&gt;So, something I didn’t know about GitHub pages. It doesn’t really support
custom Jekyll themes. Sure, there’s the &lt;a href=&quot;https://pages.github.com/themes/&quot;&gt;list
here&lt;/a&gt; of officially supported themes. If
only I knew about them &lt;em&gt;before&lt;/em&gt; I picked a theme…&lt;/p&gt;

&lt;p&gt;Nevertheless, I tried to push my website with this custom theme. While
everything builds fine locally (I’m even using the GitHub Pages gem),
GitHub Pages would refuse to build my website with the theme. It’s
supposed to work if you specify &lt;code class=&quot;highlighter-rouge&quot;&gt;remote_theme:&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You’ll never guess what happens.
&lt;img src=&quot;http://jerryjrchen.com/assets/posts/gh-pages-build.png&quot; alt=&quot;GitHub Pages builds weird&quot; /&gt;
What the heck is that?&lt;/p&gt;

&lt;h2 id=&quot;changing-to-travis-ci&quot;&gt;Changing to Travis CI&lt;/h2&gt;
&lt;p&gt;After spending a few hours on trying to fix all the build errors (it’s
really annoying to debug over email as you might imagine), I didn’t have
any patience left for trying to work around GitHub Pages. After looking at
some examples of other websites on GitHub, I decided to move to using
Travis CI.&lt;/p&gt;

&lt;h3 id=&quot;changing-branches&quot;&gt;Changing branches&lt;/h3&gt;
&lt;p&gt;I pushed the website source onto a new “source” branch. “master” would be
reserved for just build products (the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; essentially).
After that, setting up Travis CI was fairly straightforward.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A side note on Travis settings:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Travis will try to build if it detects changes to any branch, even if
it doesn’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file. This can be changed from the
settings on the Travis website. Too late for me though – I now have a
random build failed on my master branch. ☹️
&lt;img src=&quot;http://jerryjrchen.com/assets/posts/master-build.png&quot; alt=&quot;master tries to build&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;There’s an option for &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; to restrict builds to specific
branches. As you might guess, this is useless if you don’t have a
&lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; on a given branch (like master).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-final-stretch&quot;&gt;The Final Stretch&lt;/h2&gt;
&lt;p&gt;Are we done? Wait, Font Awesome isn’t loading…
&lt;img src=&quot;http://jerryjrchen.com/assets/posts/no-font-awesome.png&quot; alt=&quot;no font awesome&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;darn-it&quot;&gt;Darn it&lt;/h3&gt;
&lt;p&gt;Oh yeah, GitHub will still try to build my web page using Jekyll so
&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; is lost. Better include a &lt;code class=&quot;highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;finished&quot;&gt;Finished?&lt;/h2&gt;
&lt;p&gt;There’s still a lot to do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pagination is quite broken (though there are very few posts so
whatever).&lt;/li&gt;
  &lt;li&gt;Adding tags and categories for posts might be nice.&lt;/li&gt;
  &lt;li&gt;The Travis build is extremely barebones at the moment.&lt;/li&gt;
  &lt;li&gt;More automation for creating new posts and adding new CS 61A content
would be a nice to have, but definitely not essential. Maybe look into
&lt;code class=&quot;highlighter-rouge&quot;&gt;rake&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;I should figure out something better than copying over my &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;
folder to the website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, I’m much happier with the new site compared to the old site. Not
bad for less than one week worth of effort!&lt;/p&gt;

&lt;h2 id=&quot;and-of-course-a-summary&quot;&gt;And of course, a summary&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Changing to Travis CI rather than depending on GitHub Pages to build
everything definitely required some effort, but has made debugging a lot
easier. Honestly though, getting started with Travis was a lot easier
than I expected.&lt;/li&gt;
  &lt;li&gt;Documentation for certain aspects of GitHub Pages and Jekyll is
disappointingly scarce. Part of the reason I wrote all this down was for
future me in case I ran into these issues again.&lt;/li&gt;
  &lt;li&gt;Writing HTML still isn’t fun. But Markdown is bearable.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Building on GitHub Pages So, something I didn’t know about GitHub pages. It doesn’t really support custom Jekyll themes. Sure, there’s the list here of officially supported themes. If only I knew about them before I picked a theme…</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Redesign - A Postmortem</title>
      
      <link href="http://jerryjrchen.com/2018/01/11/redesign/" rel="alternate" type="text/html" title="Redesign - A Postmortem" />
      <published>2018-01-11T00:00:00+00:00</published>
      <updated>2018-01-11T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2018/01/11/redesign</id>
      <content type="html" xml:base="http://jerryjrchen.com/2018/01/11/redesign/">&lt;blockquote&gt;
  &lt;p&gt;If you’re curious, an archived version of my website is on the &lt;a href=&quot;https://web.archive.org/web/20170911171546/http://jerryjrchen.com/&quot;&gt;Wayback
Machine&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The starting point:
&lt;img src=&quot;http://jerryjrchen.com/assets/posts/before.png&quot; alt=&quot;before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s some problems I was having with my old website:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I was tired of the aesthetic. The material design setup just felt out of
place, and I wanted to go to something even simpler.&lt;/li&gt;
  &lt;li&gt;The CSS was a mess. On top of importing two separate bootstrap
libraries, I overlay a bunch of my own CSS on top. Starting fresh would
be a good chance to clean this up.&lt;/li&gt;
  &lt;li&gt;The color usage was inconsistent for key elements. Here’s a list of the
colors:
    &lt;ul&gt;
      &lt;li&gt;Teal for the hero (landing).&lt;/li&gt;
      &lt;li&gt;Blue for the navbar.&lt;/li&gt;
      &lt;li&gt;A different blue for one of the past semester CS 61A pages.&lt;/li&gt;
      &lt;li&gt;Black for an old navbar.&lt;/li&gt;
      &lt;li&gt;Another blue and red for the favicon.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had a few goals in mind when planning this redesign (roughly in order of
decreasing priority):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;An even simpler, more accessible student facing resource page.&lt;/strong&gt; This
actually ended up not being too difficult. This would likely help with
cleaning up the CSS mess. As an added “bonus”, I would also be changing
the aesthetic for the rest of the website.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fewer, better pages.&lt;/strong&gt; This didn’t mean having a one-pager website,
but I felt like there were too many pages doing nothing. Also,
collecting all the past CS 61A content into one page would be really
nice.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Better automation.&lt;/strong&gt; This wasn’t an initial goal, but ended up being
something I decided to add partway into the design process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;first-steps&quot;&gt;First Steps&lt;/h2&gt;
&lt;p&gt;I really liked the benefits of Jekyll for my site, so I wanted to keep
using it. The ability to write markdown as well as use a template engine
makes it really easy to avoid HTML, the worst part of web development (I’m
kidding about HTML, but only a little bit). As I would soon find out,
Jekyll + GitHub Pages still had a few unpleasant surprises in store.&lt;/p&gt;

&lt;p&gt;I decided to look around for themes, and found that
&lt;a href=&quot;https://github.com/yous/whiteglass&quot;&gt;whiteglass&lt;/a&gt; met my needs quite well.
Installing a Jekyll theme is super easy, and the process for customization
has been well thought out. The benefit of using a simple theme like
whiteglass is that it’s really easy to add or remove page elements without
having them stick out like a sore thumb.&lt;/p&gt;

&lt;p&gt;Adding my content and adjusting for this new theme went by mostly without
issues. There was a bit of a small learning curve in getting used to
working with templates, but nothing that I couldn’t easily look up online.&lt;/p&gt;

&lt;p&gt;Oh yeah. I guess pagination doesn’t work. Look at this sadness:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9999&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# TODO: pagination is broken&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dark-theme&quot;&gt;Dark Theme?&lt;/h2&gt;
&lt;p&gt;I use dark theme for most of my code related things
(editors/terminals/etc.). I was curious how well this would translate to a
website, and experimented with it a bit at this point. But sadly, the
evidence seems to suggest that &lt;a href=&quot;https://graphicdesign.stackexchange.com/a/34925&quot;&gt;dark text on a light background is more
visible&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;piling-on-the-imports&quot;&gt;Piling on the Imports&lt;/h2&gt;
&lt;p&gt;I needed to add Bootstrap and Font Awesome for some the page elements I
wanted to keep from the old website. The advice on
&lt;a href=&quot;https://stackoverflow.com/a/28737999/6469972&quot;&gt;StackOverflow&lt;/a&gt; I found
suggests using Bower. So I did:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bower install bootstrap-sass
bower cached        https://github.com/twbs/bootstrap-sass.git#3.3.7

... &amp;lt;lines omitted&amp;gt;

jquery#3.2.1 bower_components/jquery


   ╭─────────────────────────────────────╮
   │                                     │
   │   Update available 1.7.9 → 1.8.2    │
   │   Run npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; bower to update      │
   │                                     │
   ╰─────────────────────────────────────╯
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Huh, guess I’d better update.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; bower
npm WARN deprecated bower@1.8.2: ...psst! Your project can stop working at any moment because its dependencies can change. Prevent this by migrating to Yarn: https://bower.io/blog/2017/how-to-migrate-away-from-bower/
/usr/local/bin/bower -&amp;gt; /usr/local/lib/node_modules/bower/bin/bower
+ bower@1.8.2
updated 1 package &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;5.391s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Well, that doesn’t sound good. What’s a Yarn, anyways?&lt;/p&gt;

&lt;h3 id=&quot;yarn-and-node_modules&quot;&gt;Yarn and &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;As it turns out, Yarn isn’t exactly a perfect replacement for Bower. This
seems pretty minor, but Yarn installs to &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; instead of
&lt;code class=&quot;highlighter-rouge&quot;&gt;bower_components&lt;/code&gt;. I happen to want to directly include these folders in
my final website (yes, building them on the fly is probably a better
idea). Why does this matter?&lt;/p&gt;

&lt;h3 id=&quot;a-brief-rant-jekyll-and-default-excludes&quot;&gt;A brief rant: Jekyll and default excludes&lt;/h3&gt;
&lt;p&gt;It turns out that Jekyll excludes &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; by default. As of time of
writing, this doesn’t appear to be documented anywhere (grumble grumble).&lt;/p&gt;

&lt;p&gt;The only thing I could find was this &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/5210&quot;&gt;pull
request&lt;/a&gt;, where commenters
happily note that their builds have been sped up by this change. While
combining Jekyll with Yarn in this way might not have been standard, it
would have been really nice if this consequences of this change were
easier to find (ironically, someone even states that this change will
“solve a lot of user pains”).&lt;/p&gt;

&lt;p&gt;I can’t even find anything about default excludes on the Jekyll website
anywhere. Sure, it’s mentioned in the &lt;a href=&quot;https://jekyllrb.com/docs/history/#v3-3-0&quot;&gt;changelog for
v3.3.0&lt;/a&gt;. But the page is
(perhaps rightfully) excluded from the website search as well as search
engine results.&lt;/p&gt;

&lt;p&gt;In fact, the thing that tipped me off to this problem was &lt;a href=&quot;https://help.github.com/articles/files-that-start-with-an-underscore-are-missing/&quot;&gt;&lt;em&gt;GitHub’s&lt;/em&gt; own
help pages&lt;/a&gt;,
which happens to mention:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By default, Jekyll does not build any files or directories that&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;are hidden or used for backup (indicated by names that start with . or
      &amp;gt;   #, or that end with ~);&lt;/li&gt;
    &lt;li&gt;contain site content (indicated by names that start with _); or&lt;/li&gt;
    &lt;li&gt;are excluded in the site configuration.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that this still conveniently doesn’t mention &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;. 🙃.&lt;/p&gt;

&lt;p&gt;One last kicker: &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; offers an “include” option, which is
supposed to “force inclusion of directories and/or files”. Guess what? It
doesn’t work for &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-favicons&quot;&gt;New Favicons&lt;/h2&gt;
&lt;p&gt;Ah, might as well. I initially used GIMP for pixel art, but decided to try
making an SVG this time around (since Safari requires an &lt;a href=&quot;https://yoast.com/dev-blog/safari-pinned-tab-icon-mask-icon/&quot;&gt;SVG
image&lt;/a&gt; for
the pinned tab icon). So far, so good.&lt;/p&gt;

&lt;p&gt;For creating the actual favicon, I tried using
&lt;a href=&quot;https://realfavicongenerator.net&quot;&gt;realfavicongenerator.net&lt;/a&gt;. This creates
the favicon easily enough. However, the favicon has to be scaled to many
different sizes, and the website does some really ugly interpolation for
simple favicons like mine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jerryjrchen.com/assets/posts/blurry-favicon.png&quot; alt=&quot;blurry favicon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I exported the different-sized bitmaps manually through GIMP. GIMP also
lets you create the
&lt;a href=&quot;https://stackoverflow.com/a/10819673/6469972&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt;&lt;/a&gt; file which
combines many different sized icons.&lt;/p&gt;

&lt;h2 id=&quot;the-next-step&quot;&gt;The next step&lt;/h2&gt;
&lt;p&gt;Ok, so everything has been prepped locally. &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; seems to work
without issue. What could possibly go wrong when deploying to GitHub
pages?&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">If you’re curious, an archived version of my website is on the Wayback Machine.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Development Setup →</title>
      
      <link href="http://jerryjrchen.com/2018/01/10/setup/" rel="alternate" type="text/html" title="Development Setup" />
      <published>2018-01-10T00:00:00+00:00</published>
      <updated>2018-01-10T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2018/01/10/setup</id>
      <content type="html" xml:base="http://jerryjrchen.com/2018/01/10/setup/"></content>

      
      
      
      
      

      

      

      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Nit-picks</title>
      
      <link href="http://jerryjrchen.com/2017/09/10/nitpicks/" rel="alternate" type="text/html" title="Nit-picks" />
      <published>2017-09-10T00:00:00+00:00</published>
      <updated>2017-09-10T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2017/09/10/nitpicks</id>
      <content type="html" xml:base="http://jerryjrchen.com/2017/09/10/nitpicks/">&lt;h2 id=&quot;on-the-topic-of-punctuation&quot;&gt;On the topic of punctuation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;This is a hyphen: &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This is a dash: &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not say “ls &lt;em&gt;dash&lt;/em&gt; a” when you mean “ls &lt;em&gt;hyphen&lt;/em&gt; a”.&lt;/p&gt;

&lt;p&gt;You can cheat this a bit when writing English sentences, but the command line is
usually much less forgiving.&lt;/p&gt;

&lt;p&gt;I oftentimes say “hyphen hyphen” when I mean dash, since it seems like a lot of
people confuse the two. I dream of a world where I can confidently just say
“dash”…&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">On the topic of punctuation This is a hyphen: - This is a dash: --</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Configuration, part 2</title>
      
      <link href="http://jerryjrchen.com/2017/08/23/configuration/" rel="alternate" type="text/html" title="Configuration, part 2" />
      <published>2017-08-23T00:00:00+00:00</published>
      <updated>2017-08-23T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2017/08/23/configuration</id>
      <content type="html" xml:base="http://jerryjrchen.com/2017/08/23/configuration/">&lt;p&gt;The standard terminal that comes with macOS and most Linux distros is fine
(by the way, Command Prompt for Windows is not). But why settle for fine, when you can get
something even better?&lt;/p&gt;

&lt;h3 id=&quot;a-better-terminalapp&quot;&gt;A better Terminal.app&lt;/h3&gt;
&lt;p&gt;As I mention on my &lt;a href=&quot;/cs61a/setup&quot;&gt;setup page&lt;/a&gt;, iTerm 2 is basically a better
version of the default macOS terminal. There’s a whole host of nice features,
but the main reason I use iTerm 2 over Terminal.app is because of split panes.
Terminal.app only supports split panes of the same shell, whereas you can
basically have different shells (like new tabs) but in the same window with
iTerm 2. It sounds like a small thing, but it can make a fairly big difference
in terms of productivity for me.&lt;/p&gt;

&lt;h3 id=&quot;a-better-shell&quot;&gt;A better shell&lt;/h3&gt;
&lt;p&gt;You’ll probably start with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot;&gt;bash
shell&lt;/a&gt; by default, which again
is fine. But stuff like Zsh (which I’ve tried) and Fish (which I haven’t)
feature many small quality-of-life tweaks that make things easier. For Zsh,
there’s the &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh My Zsh&lt;/a&gt; framework
that makes it really easy to extend the functionality of zsh (much like
&lt;a href=&quot;/2017/08/22/configuration&quot;&gt;configuring Vim, actually&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;a-better-set-of-colors&quot;&gt;A better set of colors&lt;/h3&gt;
&lt;p&gt;Terminal starts with a black on white color scheme. It’s fine.&lt;/p&gt;

&lt;p&gt;I use the &lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;Solarized Dark colorscheme&lt;/a&gt;.
It’s better (for me at least). There’s a million different color schemes out
there, and installation is generally pretty easy so you can play around with a
couple.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">The standard terminal that comes with macOS and most Linux distros is fine (by the way, Command Prompt for Windows is not). But why settle for fine, when you can get something even better?</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Configuration, part 1</title>
      
      <link href="http://jerryjrchen.com/2017/08/22/configuration/" rel="alternate" type="text/html" title="Configuration, part 1" />
      <published>2017-08-22T00:00:00+00:00</published>
      <updated>2017-08-22T00:00:00+00:00</updated>
      <id>http://jerryjrchen.com/2017/08/22/configuration</id>
      <content type="html" xml:base="http://jerryjrchen.com/2017/08/22/configuration/">&lt;p&gt;Development configs can be a surprisingly divisive topic (tabs vs spaces, Vim vs
Emacs, etc.). To some extent, this doesn’t really matter – as long you’re
comfortable and productive with your tools, no one should care what you’re using
(and yes, I’m guilty of bugging people about their config).&lt;/p&gt;

&lt;p&gt;I have a &lt;a href=&quot;/cs61a/setup&quot;&gt;setup page&lt;/a&gt; that recommends a mishmash of different
tools, but doesn’t really go much in depth on why I chose what I chose. This is
for a few reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;That stuff is boring, especially if you aren’t looking for it.&lt;/li&gt;
  &lt;li&gt;Actually, really just reason #1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I figure if you’re still reading this, then reason #1 doesn’t apply, so I might
as well take this opportunity to describe the reasoning behind the choices. And
even after ~4 years of coding, I still find lots of things to tweak in my
development configuration. So while this is still relevant, I hope it helps
someone out there.&lt;/p&gt;

&lt;h3 id=&quot;why-vim-instead-of-any-other-text-editor&quot;&gt;Why Vim instead of Any Other Text Editor&lt;/h3&gt;
&lt;p&gt;To me, Vim is centered around one big idea: &lt;strong&gt;keyboards are faster than the
mouse/trackpad/etc., so stay on the keyboard.&lt;/strong&gt; In practice, this also means
that there’s less frustration with doing what traditionally might be mouse-based
gestures: drag and select, cursor placement, etc.&lt;/p&gt;

&lt;p&gt;The learning curve is a bit steep. But once you get used to keyboard navigation,
it’s &lt;a href=&quot;https://github.com/gggritso/Vimmy.safariextension&quot;&gt;incredibly addictive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-neovim-instead-of-vim&quot;&gt;Why Neovim instead of Vim&lt;/h3&gt;
&lt;p&gt;I initially switched to Neovim since I wanted async support. There’s some
completion/build plugins that can really slow you down if you run synchronously.
Vim 8 seems to have this now. But Neovim has more active community involvement
among many other benefits, and there is &lt;a href=&quot;https://geoff.greer.fm/2015/01/15/why-neovim-is-better-than-vim/#ref_1&quot;&gt;no shortage of pages comparing the
two&lt;/a&gt; if
you care to look.&lt;/p&gt;

&lt;h3 id=&quot;configuring-vim-or-neovim&quot;&gt;Configuring Vim (or Neovim)&lt;/h3&gt;
&lt;p&gt;I’m going to refer to both Vim and Neovim as just Vim from now on, since much
of the configuration for a beginning user is similar. I’m not going to talk
about what’s in my Vim config file (aka vimrc or init.vim). There are
&lt;a href=&quot;http://spf13.com/post/perfect-vimrc-vim-config-file/&quot;&gt;many useful examples of vimrcs online&lt;/a&gt;,
but &lt;strong&gt;blindy copying someone else’s config is the wrong way to go&lt;/strong&gt;.
The same thing goes for installing plugins. Just copying someone else’s setup
won’t be that useful to you. Instead, here’s what I would recommend.&lt;/p&gt;

&lt;p&gt;You can do a lot with Vim out of the box. Very quickly however, you will
realize there’s some “missing” feature. Let’s say you want line numbers, syntax
highlighting, etc. (it helps to have a little bit of experience with IDEs).
These are things that are easy to add to your Vim config, piece by piece.
For more complicated things, like completion or file navigation, having a good
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;plugin manager&lt;/a&gt; makes it easy to steadily
augment your configuration as well.&lt;/p&gt;

&lt;p&gt;In this way, your version of Vim naturally evolves to fit your needs, something
you can’t really get from reading some blog post. That being said, there are
some &lt;a href=&quot;https://dougblack.io/words/a-good-vimrc.html&quot;&gt;pretty good ones&lt;/a&gt; out there
that &lt;em&gt;do&lt;/em&gt; explain what you’re about to copy paste.&lt;/p&gt;

&lt;p&gt;I’m sure there’s some deep metaphor about life and minimalism here. But that’s
probably enough for one post.&lt;/p&gt;</content>

      
      
      
      
      

      

      

      

      
        <summary type="html">Development configs can be a surprisingly divisive topic (tabs vs spaces, Vim vs Emacs, etc.). To some extent, this doesn’t really matter – as long you’re comfortable and productive with your tools, no one should care what you’re using (and yes, I’m guilty of bugging people about their config).</summary>
      

      
      
    </entry>
  
  
</feed>
